--[[
   Use this compound action when you already have a path to the object
   you want to pick up (as might be generated by say, a worker scheduler.)
   Pick up the item at that point and then path to the target destination.
   The caller then describes what to do with the thing in the hands of the person.
]]
local CarryItemOnPathTo = class()

CarryItemOnPathTo.name = 'carry item on path to'
CarryItemOnPathTo.does = 'stonehearth:carry_item_on_path_to'
CarryItemOnPathTo.version = 1
CarryItemOnPathTo.priority = 5

function CarryItemOnPathTo:__init(ai, entity)
   self._entity = entity
   self._ai = ai

   self._path_to_destination = nil
   self._temp_entity = nil
   self._destination_entity = nil
   self._pathfinder = nil
end

--- Pick up and place the item designated by the caller
-- @param path_to_item The path to the object
-- @param destination_entity The object representing the destination
function CarryItemOnPathTo:run(ai, entity, path_to_item, destination_entity)
   local proxy_entity = path_to_item:get_destination()
   -- We already have a path to the object, so set up a pathfinder
   -- between the object and its final destination, to use later.
   self._destination_entity = destination_entity
   self:_find_path_to_destination_entity(proxy_entity)
   ai:execute('stonehearth:pickup_item_on_path', path_to_item)

   -- If we're here, pickup succeeded, so we're now carrying the item.
   -- Wait until the PF we started earlier returns.  Use ai:wait_for_path_finder to
   -- catch all odd cases of failure (e.g. the pathfinder goes idle or
   -- never finds a solution!)
   local path = ai:wait_for_path_finder(self._pathfinder)
   ai:execute('stonehearth:follow_path', path)
end

--- Make a pathfinder between the target item and the final destination
-- Since the pf can only path between 2 entities, and since the target_item may be
-- picked up by the worker before the pf returns, create a temporary entity to serve
-- as the starting destiantion and the final destination
-- @param target_item the item that the worker is planning to pick up
function CarryItemOnPathTo:_find_path_to_destination_entity(target_item)
   local target_item_loc = target_item:get_component('mob'):get_world_grid_location()
   self._temp_entity = radiant.entities.create_entity()
   radiant.terrain.place_entity(self._temp_entity, target_item_loc)

   local desc = string.format('finding a path from %s to a target location', tostring(target_item))
   self._pathfinder = radiant.pathfinder.create_path_finder(self._temp_entity, desc)
                        :add_destination(self._destination_entity)
end

--- Destroy the temporary entities created for the pathfinder
function CarryItemOnPathTo:_destroy_temp_entities()
   if self._pathfinder then
      self._pathfinder:stop()
      self._pathfinder = nil
   end
   self._path_to_destination = nil

   if self._temp_entity then
      -- Remove the intermediate entity
      radiant.entities.destroy_entity(self._temp_entity)
   end
end

function CarryItemOnPathTo:stop()
   self:_destroy_temp_entities()
end

return CarryItemOnPathTo
