#include "radiant.h"
#include "common.h"

using namespace radiant;
using namespace radiant::math3d;

//===============================================================================
// @ vector4.cpp
// 
// 3D vector class
// ------------------------------------------------------------------------------
// Copyright (C) 2008 by Elsevier, Inc. All rights reserved.
//
//===============================================================================

//-------------------------------------------------------------------------------
//-- Dependencies ---------------------------------------------------------------
//-------------------------------------------------------------------------------

#include "vector4.h"

//-------------------------------------------------------------------------------
//-- Static Members -------------------------------------------------------------
//-------------------------------------------------------------------------------

vector4 vector4::unit_x(1.0f, 0.0f, 0.0f, 0.0f);
vector4 vector4::unit_y(0.0f, 1.0f, 0.0f, 0.0f);
vector4 vector4::unit_z(0.0f, 0.0f, 1.0f, 0.0f);
vector4 vector4::unit_w(0.0f, 0.0f, 0.0f, 1.0f);
vector4 vector4::origin(0.0f, 0.0f, 0.0f, 0.0f);

//-------------------------------------------------------------------------------
//-- Methods --------------------------------------------------------------------
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
// @ vector4::vector4()
//-------------------------------------------------------------------------------
// Copy constructor
//-------------------------------------------------------------------------------
vector4::vector4(const vector4& other) : 
    x(other.x),
    y(other.y),
    z(other.z),
    w(other.w)
{

}   // End of vector4::vector4()


//-------------------------------------------------------------------------------
// @ vector4::operator=()
//-------------------------------------------------------------------------------
// Assignment operator
//-------------------------------------------------------------------------------
vector4&
vector4::operator=(const vector4& other)
{
    // if same object
    if (this == &other)
        return *this;
        
    x = other.x;
    y = other.y;
    z = other.z;
    w = other.w;
    
    return *this;

}   // End of vector4::operator=()


//-------------------------------------------------------------------------------
// @ operator<<()
//-------------------------------------------------------------------------------
// Text output for debugging
//-------------------------------------------------------------------------------
std::ostream& 
math3d::operator<<(std::ostream& out, const vector4& source)
{
    out << '<' << source.x << ',' << source.y << ',' << source.z << ','
        << source.w << '>';

    return out;
    
}   // End of operator<<()
    

//-------------------------------------------------------------------------------
// @ vector4::length()
//-------------------------------------------------------------------------------
// Vector length
//-------------------------------------------------------------------------------
float 
vector4::length() const
{
    return math3d::sqrt(x*x + y*y + z*z + w*w);

}   // End of vector4::length()


//-------------------------------------------------------------------------------
// @ vector4::length_squared()
//-------------------------------------------------------------------------------
// Vector length squared (avoids square root)
//-------------------------------------------------------------------------------
float 
vector4::length_squared() const
{
    return (x*x + y*y + z*z + w*w);

}   // End of vector4::length_squared()


//-------------------------------------------------------------------------------
// @ vector4::operator==()
//-------------------------------------------------------------------------------
// Comparison operator
//-------------------------------------------------------------------------------
bool 
vector4::operator==(const vector4& other) const
{
    if (::math3d::are_equal(other.x, x)
        && ::math3d::are_equal(other.y, y)
        && ::math3d::are_equal(other.z, z)
        && ::math3d::are_equal(other.w, w))
        return true;

    return false;   
}   // End of vector4::operator==()


//-------------------------------------------------------------------------------
// @ vector4::operator!=()
//-------------------------------------------------------------------------------
// Comparison operator
//-------------------------------------------------------------------------------
bool 
vector4::operator!=(const vector4& other) const
{
    if (::math3d::are_equal(other.x, x)
        && ::math3d::are_equal(other.y, y)
        && ::math3d::are_equal(other.z, z)
        && ::math3d::are_equal(other.w, w))
        return false;

    return true;
}   // End of vector4::operator!=()


//-------------------------------------------------------------------------------
// @ IvVector4::is_zero()
//-------------------------------------------------------------------------------
// Check for zero vector
//-------------------------------------------------------------------------------
bool 
vector4::is_zero() const
{
    return math3d::is_zero(x*x + y*y + z*z + w*w);

}   // End of IvVector4math::is_zero()


//-------------------------------------------------------------------------------
// @ vector4::is_unit()
//-------------------------------------------------------------------------------
// Check for unit vector
//-------------------------------------------------------------------------------
bool 
vector4::is_unit() const
{
    return math3d::is_zero(1.0f - x*x - y*y - z*z - w*w);

}   // End of vector4::is_unit()


//-------------------------------------------------------------------------------
// @ vector4::clean()
//-------------------------------------------------------------------------------
// Set elements close to zero equal to zero
//-------------------------------------------------------------------------------
void
vector4::clean()
{
    if (math3d::is_zero(x))
        x = 0.0f;
    if (math3d::is_zero(y))
        y = 0.0f;
    if (math3d::is_zero(z))
        z = 0.0f;
    if (math3d::is_zero(w))
        w = 0.0f;

}   // End of vector4::clean()


//-------------------------------------------------------------------------------
// @ vector4::normalize()
//-------------------------------------------------------------------------------
// Set to unit vector
//-------------------------------------------------------------------------------
void
vector4::normalize()
{
    float lengthsq = x*x + y*y + z*z + w*w;

    if (math3d::is_zero(lengthsq))
    {
        set_zero();
    }
    else
    {
        float factor = math3d::inv_sqrt(lengthsq);
        x *= factor;
        y *= factor;
        z *= factor;
        w *= factor;
    }

}   // End of vector4::normalize()


//-------------------------------------------------------------------------------
// @ vector4::operator+()
//-------------------------------------------------------------------------------
// Add vector to self and return
//-------------------------------------------------------------------------------
vector4 
vector4::operator+(const vector4& other) const
{
    return vector4(x + other.x, y + other.y, z + other.z, w + other.w);

}   // End of vector4::operator+()


//-------------------------------------------------------------------------------
// @ vector4::operator+=()
//-------------------------------------------------------------------------------
// Add vector to self, store in self
//-------------------------------------------------------------------------------
vector4& 
vector4::operator+=(const vector4& other)
{
    x += other.x;
    y += other.y;
    z += other.z;
    w += other.w;

    return *this;

}   // End of vector4::operator+=()


//-------------------------------------------------------------------------------
// @ vector4::operator-()
//-------------------------------------------------------------------------------
// Subtract vector from self and return
//-------------------------------------------------------------------------------
vector4 
vector4::operator-(const vector4& other) const
{
    return vector4(x - other.x, y - other.y, z - other.z, w - other.w);

}   // End of vector4::operator-()


//-------------------------------------------------------------------------------
// @ vector4::operator-=()
//-------------------------------------------------------------------------------
// Subtract vector from self, store in self
//-------------------------------------------------------------------------------
vector4& 
vector4::operator-=(const vector4& other)
{
    x -= other.x;
    y -= other.y;
    z -= other.z;
    w -= other.w;

    return *this;

}   // End of vector4::operator-=()


//-------------------------------------------------------------------------------
// @ operator*()
//-------------------------------------------------------------------------------
// Scalar multiplication
//-------------------------------------------------------------------------------
vector4   
vector4::operator*(float scalar)
{
    return vector4(scalar*x, scalar*y, scalar*z,
                      scalar*w);

}   // End of operator*()


//-------------------------------------------------------------------------------
// @ operator*()
//-------------------------------------------------------------------------------
// Scalar multiplication
//-------------------------------------------------------------------------------
vector4   
operator*(float scalar, const vector4& vector)
{
    return vector4(scalar*vector.x, scalar*vector.y, scalar*vector.z,
                      scalar*vector.w);

}   // End of operator*()


//-------------------------------------------------------------------------------
// @ vector4::operator*()
//-------------------------------------------------------------------------------
// Scalar multiplication by self
//-------------------------------------------------------------------------------
vector4&
vector4::operator*=(float scalar)
{
    x *= scalar;
    y *= scalar;
    z *= scalar;
    w *= scalar;

    return *this;

}   // End of vector4::operator*()


//-------------------------------------------------------------------------------
// @ operator/()
//-------------------------------------------------------------------------------
// Scalar division
//-------------------------------------------------------------------------------
vector4   
vector4::operator/(float scalar)
{
    return vector4(x/scalar, y/scalar, z/scalar, w/scalar);

}   // End of operator*()


//-------------------------------------------------------------------------------
// @ vector4::operator/=()
//-------------------------------------------------------------------------------
// Scalar division by self
//-------------------------------------------------------------------------------
vector4&
vector4::operator/=(float scalar)
{
    x /= scalar;
    y /= scalar;
    z /= scalar;
    w /= scalar;

    return *this;

}   // End of vector4::operator/=()


//-------------------------------------------------------------------------------
// @ vector4::dot()
//-------------------------------------------------------------------------------
// dot product by self
//-------------------------------------------------------------------------------
float               
vector4::dot(const vector4& vector) const
{
    return (x*vector.x + y*vector.y + z*vector.z + w*vector.w);

}   // End of vector4::dot()


//-------------------------------------------------------------------------------
// @ dot()
//-------------------------------------------------------------------------------
// dot product friend operator
//-------------------------------------------------------------------------------
float               
dot(const vector4& vector1, const vector4& vector2)
{
    return (vector1.x*vector2.x + vector1.y*vector2.y + vector1.z*vector2.z
            + vector1.w*vector2.w);

}   // End of dot()
