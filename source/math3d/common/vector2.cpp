#include "radiant.h"
#include "common.h"

using namespace radiant;
using namespace radiant::math3d;

//===============================================================================
// @ vector2.cpp
// 
// 3D vector class
// ------------------------------------------------------------------------------
// Copyright (C) 2008 by Elsevier, Inc. All rights reserved.
//
//===============================================================================

//-------------------------------------------------------------------------------
//-- Dependencies ---------------------------------------------------------------
//-------------------------------------------------------------------------------

#include "vector2.h"

//-------------------------------------------------------------------------------
//-- Static Members -------------------------------------------------------------
//-------------------------------------------------------------------------------

vector2 vector2::unit_x(1.0f, 0.0f);
vector2 vector2::unit_y(0.0f, 1.0f);
vector2 vector2::origin(0.0f, 0.0f);
vector2 vector2::xy(1.0f, 1.0f);

//-------------------------------------------------------------------------------
//-- Methods --------------------------------------------------------------------
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
// @ operator<<()
//-------------------------------------------------------------------------------
// Text output for debugging
//-------------------------------------------------------------------------------
std::ostream& 
math3d::operator<<(std::ostream& out, const vector2& source)
{
    out << '<' << source.x << ',' << source.y << ',' << '>';

    return out;
    
}   // End of operator<<()
    

//-------------------------------------------------------------------------------
// @ vector2::length()
//-------------------------------------------------------------------------------
// Vector length
//-------------------------------------------------------------------------------
float 
vector2::length() const
{
    return math3d::sqrt(x*x + y*y);

}   // End of vector2::length()


//-------------------------------------------------------------------------------
// @ vector2::length_squared()
//-------------------------------------------------------------------------------
// Vector length squared (avoids square root)
//-------------------------------------------------------------------------------
float 
vector2::length_squared() const
{
    return (x*x + y*y);

}   // End of vector2::length_squared()


//-------------------------------------------------------------------------------
// @ vector2::operator==()
//-------------------------------------------------------------------------------
// Comparison operator
//-------------------------------------------------------------------------------
bool 
vector2::operator==(const vector2& other) const
{
    if (::math3d::are_equal(other.x, x)
        && ::math3d::are_equal(other.y, y))
        return true;

    return false;   
}   // End of vector2::operator==()


//-------------------------------------------------------------------------------
// @ vector2::operator!=()
//-------------------------------------------------------------------------------
// Comparison operator
//-------------------------------------------------------------------------------
bool 
vector2::operator!=(const vector2& other) const
{
    if (::math3d::are_equal(other.x, x)
        && ::math3d::are_equal(other.y, y))
        return false;

    return true;
}   // End of vector2::operator!=()


//-------------------------------------------------------------------------------
// @ vector2math::is_zero()
//-------------------------------------------------------------------------------
// Check for zero vector
//-------------------------------------------------------------------------------
bool 
vector2::is_zero() const
{
    return math3d::is_zero(x*x + y*y);

}   // End of vector2math::is_zero()


//-------------------------------------------------------------------------------
// @ vector2::clean()
//-------------------------------------------------------------------------------
// Set elements close to zero equal to zero
//-------------------------------------------------------------------------------
void
vector2::clean()
{
    if (math3d::is_zero(x))
        x = 0.0f;
    if (math3d::is_zero(y))
        y = 0.0f;

}   // End of vector2::clean()


//-------------------------------------------------------------------------------
// @ vector2::normalize()
//-------------------------------------------------------------------------------
// Set to unit vector
//-------------------------------------------------------------------------------
void
vector2::normalize()
{
    float lengthsq = x*x + y*y;

    if (math3d::is_zero(lengthsq))
    {
        set_zero();
    }
    else
    {
        float factor = math3d::inv_sqrt(lengthsq);
        x *= factor;
        y *= factor;
    }

}   // End of vector2::normalize()


//-------------------------------------------------------------------------------
// @ vector2::operator+()
//-------------------------------------------------------------------------------
// Add vector to self and return
//-------------------------------------------------------------------------------
vector2 
vector2::operator+(const vector2& other) const
{
    return vector2(x + other.x, y + other.y);

}   // End of vector2::operator+()


//-------------------------------------------------------------------------------
// @ vector2::operator+=()
//-------------------------------------------------------------------------------
// Add vector to self, store in self
//-------------------------------------------------------------------------------
vector2& 
operator+=(vector2& self, const vector2& other)
{
    self.x += other.x;
    self.y += other.y;

    return self;

}   // End of vector2::operator+=()


//-------------------------------------------------------------------------------
// @ vector2::operator-()
//-------------------------------------------------------------------------------
// Subtract vector from self and return
//-------------------------------------------------------------------------------
vector2 
vector2::operator-(const vector2& other) const
{
    return vector2(x - other.x, y - other.y);

}   // End of vector2::operator-()


//-------------------------------------------------------------------------------
// @ vector2::operator-=()
//-------------------------------------------------------------------------------
// Subtract vector from self, store in self
//-------------------------------------------------------------------------------
vector2& 
operator-=(vector2& self, const vector2& other)
{
    self.x -= other.x;
    self.y -= other.y;

    return self;

}   // End of vector2::operator-=()

//-------------------------------------------------------------------------------
// @ vector2::operator-() (unary)
//-------------------------------------------------------------------------------
// Negate self and return
//-------------------------------------------------------------------------------
vector2
vector2::operator-() const
{
    return vector2(-x, -y);
}    // End of vector2::operator-()


//-------------------------------------------------------------------------------
// @ operator*()
//-------------------------------------------------------------------------------
// Scalar multiplication
//-------------------------------------------------------------------------------
vector2   
vector2::operator*(float scalar)
{
    return vector2(scalar*x, scalar*y);

}   // End of operator*()


//-------------------------------------------------------------------------------
// @ operator*()
//-------------------------------------------------------------------------------
// Scalar multiplication
//-------------------------------------------------------------------------------
vector2   
operator*(float scalar, const vector2& vector)
{
    return vector2(scalar*vector.x, scalar*vector.y);

}   // End of operator*()


//-------------------------------------------------------------------------------
// @ vector2::operator*()
//-------------------------------------------------------------------------------
// Scalar multiplication by self
//-------------------------------------------------------------------------------
vector2&
vector2::operator*=(float scalar)
{
    x *= scalar;
    y *= scalar;

    return *this;

}   // End of vector2::operator*=()


//-------------------------------------------------------------------------------
// @ operator/()
//-------------------------------------------------------------------------------
// Scalar division
//-------------------------------------------------------------------------------
vector2   
vector2::operator/(float scalar)
{
    return vector2(x/scalar, y/scalar);

}   // End of operator/()


//-------------------------------------------------------------------------------
// @ vector2::operator/=()
//-------------------------------------------------------------------------------
// Scalar division by self
//-------------------------------------------------------------------------------
vector2&
vector2::operator/=(float scalar)
{
    x /= scalar;
    y /= scalar;

    return *this;

}   // End of vector2::operator/=()


//-------------------------------------------------------------------------------
// @ vector2::dot()
//-------------------------------------------------------------------------------
// dot product by self
//-------------------------------------------------------------------------------
float               
vector2::dot(const vector2& vector) const
{
    return (x*vector.x + y*vector.y);

}   // End of vector2::dot()


//-------------------------------------------------------------------------------
// @ dot()
//-------------------------------------------------------------------------------
// dot product friend operator
//-------------------------------------------------------------------------------
float               
dot(const vector2& vector1, const vector2& vector2)
{
    return (vector1.x*vector2.x + vector1.y*vector2.y);

}   // End of dot()


//-------------------------------------------------------------------------------
// @ vector2::perp_dot()
//-------------------------------------------------------------------------------
// Perpendicular dot product by self
//-------------------------------------------------------------------------------
float               
vector2::perp_dot(const vector2& vector) const
{
    return (x*vector.y - y*vector.x);

}   // End of vector2::dot()


//-------------------------------------------------------------------------------
// @ dot()
//-------------------------------------------------------------------------------
// dot product friend operator
//-------------------------------------------------------------------------------
float               
perp_dot(const vector2& vector1, const vector2& vector2)
{
    return (vector1.x*vector2.y - vector1.y*vector2.x);

}   // End of dot()

