#include "radiant.h"
#include "radiant.pb.h"
#include <iomanip>
#include "common.h"

using namespace radiant;
using namespace radiant::math3d;

//===============================================================================
// @ vector3.cpp
// 
// 3D vector class
// ------------------------------------------------------------------------------
// Copyright (C) 2008 by Elsevier, Inc. All rights reserved.
//
//===============================================================================

//-------------------------------------------------------------------------------
//-- Dependencies ---------------------------------------------------------------
//-------------------------------------------------------------------------------

#include "vector3.h"

//-------------------------------------------------------------------------------
//-- Static Members -------------------------------------------------------------
//-------------------------------------------------------------------------------

vector3 vector3::unit_x(1.0f, 0.0f, 0.0f);
vector3 vector3::unit_y(0.0f, 1.0f, 0.0f);
vector3 vector3::unit_z(0.0f, 0.0f, 1.0f);
vector3 vector3::origin(0.0f, 0.0f, 0.0f);
vector3 vector3::zero(0.0f, 0.0f, 0.0f);

//-------------------------------------------------------------------------------
//-- Methods --------------------------------------------------------------------
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
// @ vector3::vector3()
//-------------------------------------------------------------------------------
// Copy constructor
//-------------------------------------------------------------------------------
vector3::vector3(const vector3& other) : 
    x(other.x),
    y(other.y),
    z(other.z)
{

}   // End of vector3::vector3()


//-------------------------------------------------------------------------------
// @ vector3::operator=()
//-------------------------------------------------------------------------------
// Assignment operator
//-------------------------------------------------------------------------------
vector3&
vector3::operator=(const vector3& other)
{
    // if same object
    if (this == &other)
        return *this;
        
    x = other.x;
    y = other.y;
    z = other.z;
    
    return *this;

}   // End of vector3::operator=()


//-------------------------------------------------------------------------------
// @ operator<<()
//-------------------------------------------------------------------------------
// Text output for debugging
//-------------------------------------------------------------------------------
std::ostream& 
math3d::operator<<(std::ostream& out, const vector3& source)
{
   out << std::fixed << std::setprecision(4) << "<" << source.x << ", " << source.y << ", " << source.z << ">";

   return out;

}   // End of operator<<()
    

//-------------------------------------------------------------------------------
// @ vector3::length()
//-------------------------------------------------------------------------------
// Vector length
//-------------------------------------------------------------------------------
float 
vector3::length() const
{
    return math3d::sqrt(x*x + y*y + z*z);

}   // End of vector3::length()


//-------------------------------------------------------------------------------
// @ vector3::length_squared()
//-------------------------------------------------------------------------------
// Vector length squared (avoids square root)
//-------------------------------------------------------------------------------
float 
vector3::length_squared() const
{
    return (x*x + y*y + z*z);

}   // End of vector3::length_squared()


//-------------------------------------------------------------------------------
// @ ::distance()
//-------------------------------------------------------------------------------
// Point distance
//-------------------------------------------------------------------------------
float 
math3d::distance(const vector3& p0, const vector3& p1)
{
    float x = p0.x - p1.x;
    float y = p0.y - p1.y;
    float z = p0.z - p1.z;

    return math3d::sqrt(x*x + y*y + z*z);

}   // End of vector3::length()


//-------------------------------------------------------------------------------
// @ ::distance_squared()
//-------------------------------------------------------------------------------
// Point distance
//-------------------------------------------------------------------------------
float 
math3d::distance_squared(const vector3& p0, const vector3& p1)
{
    float x = p0.x - p1.x;
    float y = p0.y - p1.y;
    float z = p0.z - p1.z;

    return (x*x + y*y + z*z);

}   // End of ::distance_squared()


//-------------------------------------------------------------------------------
// @ vector3::operator==()
//-------------------------------------------------------------------------------
// Comparison operator
//-------------------------------------------------------------------------------
bool 
vector3::operator==(const vector3& other) const
{
    if (::math3d::are_equal(other.x, x)
        && ::math3d::are_equal(other.y, y)
        && ::math3d::are_equal(other.z, z))
        return true;

    return false;   
}   // End of vector3::operator==()


//-------------------------------------------------------------------------------
// @ vector3::operator!=()
//-------------------------------------------------------------------------------
// Comparison operator
//-------------------------------------------------------------------------------
bool 
vector3::operator!=(const vector3& other) const
{
    if (::math3d::are_equal(other.x, x)
        && ::math3d::are_equal(other.y, y)
        && ::math3d::are_equal(other.z, z))
        return false;

    return true;
}   // End of vector3::operator!=()


//-------------------------------------------------------------------------------
// @ vector3math::is_zero()
//-------------------------------------------------------------------------------
// Check for zero vector
//-------------------------------------------------------------------------------
bool 
vector3::is_zero() const
{
    return math3d::is_zero(x*x + y*y + z*z);

}   // End of vector3math::is_zero()


//-------------------------------------------------------------------------------
// @ vector3::is_unit()
//-------------------------------------------------------------------------------
// Check for unit vector
//-------------------------------------------------------------------------------
bool 
vector3::is_unit() const
{
    return math3d::is_zero(1.0f - x*x - y*y - z*z);

}   // End of vector3::is_unit()


//-------------------------------------------------------------------------------
// @ vector3::clean()
//-------------------------------------------------------------------------------
// Set elements close to zero equal to zero
//-------------------------------------------------------------------------------
void
vector3::clean()
{
    if (math3d::is_zero(x))
        x = 0.0f;
    if (math3d::is_zero(y))
        y = 0.0f;
    if (math3d::is_zero(z))
        z = 0.0f;

}   // End of vector3::clean()


//-------------------------------------------------------------------------------
// @ vector3::normalize()
//-------------------------------------------------------------------------------
// Set to unit vector
//-------------------------------------------------------------------------------
void
vector3::normalize()
{
    float lengthsq = x*x + y*y + z*z;

    if (math3d::is_zero(lengthsq))
    {
        set_zero();
    }
    else
    {
        float factor = math3d::inv_sqrt(lengthsq);
        x *= factor;
        y *= factor;
        z *= factor;
    }

}   // End of vector3::normalize()


//-------------------------------------------------------------------------------
// @ vector3::operator+()
//-------------------------------------------------------------------------------
// Add vector to self and return
//-------------------------------------------------------------------------------
vector3 
vector3::operator+(const vector3& other) const
{
    return vector3(x + other.x, y + other.y, z + other.z);

}   // End of vector3::operator+()


//-------------------------------------------------------------------------------
// @ vector3::operator+=()
//-------------------------------------------------------------------------------
// Add vector to self, store in self
//-------------------------------------------------------------------------------
vector3& 
math3d::operator+=(vector3& self, const vector3& other)
{
    self.x += other.x;
    self.y += other.y;
    self.z += other.z;

    return self;

}   // End of vector3::operator+=()


//-------------------------------------------------------------------------------
// @ vector3::operator-()
//-------------------------------------------------------------------------------
// Subtract vector from self and return
//-------------------------------------------------------------------------------
vector3 
vector3::operator-(const vector3& other) const
{
    return vector3(x - other.x, y - other.y, z - other.z);

}   // End of vector3::operator-()


//-------------------------------------------------------------------------------
// @ vector3::operator-=()
//-------------------------------------------------------------------------------
// Subtract vector from self, store in self
//-------------------------------------------------------------------------------
vector3& 
math3d::operator-=(vector3& self, const vector3& other)
{
    self.x -= other.x;
    self.y -= other.y;
    self.z -= other.z;

    return self;

}   // End of vector3::operator-=()

//-------------------------------------------------------------------------------
// @ vector3::operator-=() (unary)
//-------------------------------------------------------------------------------
// Negate self and return
//-------------------------------------------------------------------------------
vector3
vector3::operator-() const
{
    return vector3(-x, -y, -z);
}    // End of vector3::operator-()


//-------------------------------------------------------------------------------
// @ operator*()
//-------------------------------------------------------------------------------
// Scalar multiplication
//-------------------------------------------------------------------------------
vector3   
vector3::operator*(float scalar) const
{
    return vector3(scalar*x, scalar*y, scalar*z);

}   // End of operator*()


//-------------------------------------------------------------------------------
// @ operator*()
//-------------------------------------------------------------------------------
// Scalar multiplication
//-------------------------------------------------------------------------------
vector3   
math3d::operator*(float scalar, const vector3& vector)
{
    return vector3(scalar*vector.x, scalar*vector.y, scalar*vector.z);

}   // End of operator*()


//-------------------------------------------------------------------------------
// @ vector3::operator*()
//-------------------------------------------------------------------------------
// Scalar multiplication by self
//-------------------------------------------------------------------------------
vector3&
vector3::operator*=(float scalar)
{
    x *= scalar;
    y *= scalar;
    z *= scalar;

    return *this;

}   // End of vector3::operator*=()


//-------------------------------------------------------------------------------
// @ operator/()
//-------------------------------------------------------------------------------
// Scalar division
//-------------------------------------------------------------------------------
vector3   
vector3::operator/(float scalar) const
{
    return vector3(x/scalar, y/scalar, z/scalar);

}   // End of operator/()


//-------------------------------------------------------------------------------
// @ vector3::operator/=()
//-------------------------------------------------------------------------------
// Scalar division by self
//-------------------------------------------------------------------------------
vector3&
vector3::operator/=(float scalar)
{
    x /= scalar;
    y /= scalar;
    z /= scalar;

    return *this;

}   // End of vector3::operator/=()


//-------------------------------------------------------------------------------
// @ vector3::dot()
//-------------------------------------------------------------------------------
// dot product by self
//-------------------------------------------------------------------------------
float               
vector3::dot(const vector3& vector) const
{
    return (x*vector.x + y*vector.y + z*vector.z);

}   // End of vector3::dot()


//-------------------------------------------------------------------------------
// @ dot()
//-------------------------------------------------------------------------------
// dot product friend operator
//-------------------------------------------------------------------------------
float               
math3d::dot(const vector3& vector1, const vector3& vector2)
{
    return (vector1.x*vector2.x + vector1.y*vector2.y + vector1.z*vector2.z);

}   // End of dot()


//-------------------------------------------------------------------------------
// @ vector3::cross()
//-------------------------------------------------------------------------------
// cross product by self
//-------------------------------------------------------------------------------
vector3   
vector3::cross(const vector3& vector) const
{
    return vector3(y*vector.z - z*vector.y,
                      z*vector.x - x*vector.z,
                      x*vector.y - y*vector.x);

}   // End of vector3::cross()


//-------------------------------------------------------------------------------
// @ cross()
//-------------------------------------------------------------------------------
// cross product friend operator
//-------------------------------------------------------------------------------
vector3               
math3d::cross(const vector3& vector1, const vector3& vector2)
{
    return vector3(vector1.y*vector2.z - vector1.z*vector2.y,
                      vector1.z*vector2.x - vector1.x*vector2.z,
                      vector1.x*vector2.y - vector1.y*vector2.x);

}   // End of cross()


