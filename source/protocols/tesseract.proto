import "radiant.proto";
import "world.proto";
import "store.proto";

package radiant.tesseract.protocol;

option optimize_for = SPEED;

message Request {
   extensions 100 to max;
   enum Type {
      FetchObjectRequest = 1;
      PostCommandRequest = 2;
      ScriptCommandRequest = 3;
   }
   required Type     type = 1;
   required uint32   request_id = 2;
};

message FetchObjectRequest {
   extend Request {
      optional FetchObjectRequest extension = 101;
   }
   required string   uri = 1;
}

message PostCommandRequest {
   extend Request {
      optional PostCommandRequest extension = 102;
   }
   required string   path = 1;
   optional string   query = 2;
   optional string   data = 3;
}

message ScriptCommandRequest {
   extend Request {
      optional ScriptCommandRequest extension = 103;
   }
   required string   cmd = 1;
}

message Update {
   extensions 100 to max;
   enum Type {
      BeginUpdate = 1;
      SetServerTick = 2;
      CommandReply = 3;
      UpdateObject = 4;
      RemoveObjects = 5;
      AllocObjects = 6;
      UpdateDebugShapes = 7;
      EndUpdate = 9;
      FetchObjectReply = 10;
      PostCommandReply = 11;
      ScriptCommandReply = 12;
      DefineRemoteObject = 13;
   }
   required Type     type = 1;
   optional int32    chunk_size = 2;
   optional int32    chunk_progress = 3;
   optional int32    reply_id = 4;
}

message BeginUpdate {
   extend Update {
      optional BeginUpdate extension = 101;
   }
   required uint32   sequence_number = 1;
}

message SetServerTick {
   extend Update {
      optional SetServerTick extension = 102;
   }
   required uint32   now = 1;
}

message CommandReply {
   extend Update {
      optional CommandReply extension = 103;
   }
   required int32    reply_id = 1;
   required string   msg = 2;
}

message UpdateObject {
   extend Update {
      optional UpdateObject extension = 104;
   }
   required Protocol.Object object = 1;
}

message RemoveObjects {
   extend Update {
      optional RemoveObjects extension = 105;
   }
   repeated uint32 objects = 1;
}

message AllocObjects {
   extend Update {
      optional AllocObjects extension = 106;
   }
   message Entry {
      required int32 object_id = 1;
      required int32 object_type = 2;
   }
   repeated Entry objects = 1;
}

message UpdateDebugShapes {
   extend Update {
      optional UpdateDebugShapes extension = 107;
   }
   required radiant.protocol.shapelist shapelist = 1;
}

message EndUpdate {
   extend Update {
      optional EndUpdate extension = 109;
   }
}

message FetchObjectReply {
   extend Update {
      optional FetchObjectReply extension = 119;
   }
   required int32       status_code = 1;
   optional string      mime_type = 2;
   optional string      content = 3;
}

message PostCommandReply {
   extend Update {
      optional PostCommandReply extension = 120;
   }
   required int32       status_code = 1;
   optional string      mime_type = 2;
   optional string      content = 3;
}

message ScriptCommandReply {
   extend Update {
      optional ScriptCommandReply extension = 121;
   }
   optional string      result = 1;
}

message DefineRemoteObject {
   extend Update {
      optional DefineRemoteObject extension = 122;
   }
   optional string      uri = 1;
   optional string      object_uri = 2;
}

message ClientRequest {
   optional int32        request_id = 1;
   required string       request = 2; // json
}
