import "radiant.proto";

package Protocol;

message Store {
   optional int32 version = 1;
   optional int32 store_id = 2;
   optional int32 next_object_id = 3;
   optional int32 next_generation = 4;
};

message Object {
   required int32 object_id = 1;
   required int32 timestamp = 2;
   required Value value = 3;
   optional int32 object_type = 4;
};

message Value {
   extensions 2 to 2000;
   optional int32 type_id = 1;
};

message Record {
   message Entry {
      required string   field = 1;
      required int32    value = 2;
   }
   extend Value {
      repeated Entry record_fields = 3;
   }
}

message Set {
   message Update {
      repeated Value   contents = 2;
      repeated Value   added = 3;
      repeated Value   removed = 4;
   }
   extend Value {
      optional Update extension = 4;
   }
}

message Map {
   message Entry {
      required Value   key = 1;
      required Value   value = 2;
   }
   message Update {
      repeated Entry   contents = 2;
      repeated Entry   added = 3;
      repeated Value   removed = 4;
   }
   extend Value {
      optional Update extension = 5;
   }
}

message BoxedRef {
   message Entry {
      required int32    owner = 1;
      required int32    boxed = 2;
   }
   extend Value {
      optional Entry extension = 6;
   }
}


message Array {
   message Entry {
      required int32    index = 1;
      required Value    value = 2;
   }
   extend Value {
      repeated Entry extension = 7;
   }
}

message Ref {
   extend Value {
      optional int32   ref_object_id = 8;
   }
}

message Queue {
   message Update {
      repeated Value   contents = 1;
   }
   extend Value {
      optional Update extension = 9;
   }
}

extend Value {
   optional int32 integer = 100;
   optional string string = 101;
   optional bool boolean = 102;
   optional float singleprecision = 103;
   optional radiant.protocol.transform transform = 104;
   optional radiant.protocol.point1i point1i = 105;
   optional radiant.protocol.point1f point1f = 106;
   optional radiant.protocol.point2i point2i = 107;
   optional radiant.protocol.point2f point2f = 108;
   optional radiant.protocol.point3i point3i = 109;
   optional radiant.protocol.point3f point3f = 110;
   optional radiant.protocol.cube3i cube3i  = 111;
   optional radiant.protocol.cube3f cube3f  = 112;
   optional radiant.protocol.cube2i cube2i  = 113;
   optional radiant.protocol.cube2f cube2f  = 114;
   optional radiant.protocol.cube1i cube1i  = 115;
   optional radiant.protocol.cube1f cube1f  = 116;
   optional radiant.protocol.region3i region3i  = 118;
   optional radiant.protocol.region3f region3f  = 119;
   optional radiant.protocol.region2i region2i  = 120;
   optional radiant.protocol.region2f region2f  = 121;
   optional radiant.protocol.region1i region1i  = 122;
   optional radiant.protocol.region1f region1f  = 123;
   optional radiant.protocol.sphere3f sphere3f  = 124;
   optional radiant.protocol.color color = 125;
   optional radiant.protocol.quaternion quaternion = 126;
   optional radiant.protocol.ray3f ray3f = 127;
   optional double doubleprecision = 128;
};

message Animation {
   required string      name = 1;
   required int32       start = 2;
   required int32       end = 3;
   required int32       flags = 4;
   extend Value {
      optional Animation animation = 200;
   }
};

message GridTile {
   required bytes cells  = 1;
   extend Value {
      optional GridTile tile = 201;
   }
};


message Grid {
   required bytes palette = 1;
   extend Value {
      optional Grid extension  = 202;
   }
};

message Selection {
   optional int32             entity = 1;
   optional radiant.protocol.cube3i  bounds = 2;
   optional int32 object = 3;
   optional int32 object_type = 4;
   optional radiant.protocol.point3i block = 5;
   optional string string = 6;
   optional int32 number = 7;
   extend Value {
      optional Selection extension  = 203;
   }
}

message LuaControllerObject {
   optional string lua_script = 1;
   extend Value {
      optional LuaControllerObject extension  = 204;
   }
};

message LuaDataObject {
   optional Value lua_object = 1;
   extend Value {
      optional LuaDataObject extension  = 205;
   }
};

message LuaObject {
   extend Value {
      optional LuaObject extension = 206;
   }
   enum Type {
      BOOLEAN = 1;
      NUMBER = 2;
      STRING = 3;
      TABLE = 4;
      USERDATA = 5;
      NIL = 6;
      FUNCTION = 7;
   }
   message Table {
      message Entry {
         required LuaObject   key = 1;
         required LuaObject   value = 2;
      }
      repeated Entry    entries = 1;
   };
   optional Type        type = 1;
   optional bool        boolean_value = 2;
   optional double      number_value = 3;
   optional string      string_value = 4;
   optional uint32      table_value = 5;   
   optional Value       userdata_value = 6;
   repeated Table       tables = 7;
};

message RandomNumberGenerator {
   extend Value {
      optional RandomNumberGenerator extension = 207;
   }
   optional bytes       state = 1;
};
